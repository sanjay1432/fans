'use strict';
/**
 * Created by Amit.
 */

var Controller = require('../Controllers');
var UniversalFunctions = require('../Utils/UniversalFunctions');
var Joi = require('joi');

module.exports = [
    {
        method: 'POST',
        path: '/api/fanspick/register',
        handler: function (request, reply) {
            var payloadData = request.payload;
            Controller.FanspickController.createUser(payloadData, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(UniversalFunctions.CONFIG.APP_CONSTANTS.STATUS_MSG.SUCCESS.CREATED, data))
                }
            });
        },
        config: {
            description: 'Register Fanspick user',
            tags: ['api', 'fanspick'],
            /* payload: {
                 output: 'file',
                 parse: true,
                 allow: 'multipart/form-data',
                 maxBytes: 40485760
             }, */
            validate: {
                payload: {

                    fcmId: Joi.string().trim(),
                    firstname: Joi.string().regex(/^[a-zA-Z -]+$/).trim().min(2).optional(),
                    lastname: Joi.string().regex(/^[a-zA-Z -]+$/).trim().min(2).optional(),
                    emailId: Joi.string().email().required(),
                    username: Joi.string().required().trim(),
                    dob: Joi.date().format('YYYY-MM-DD').description('YYYY-MM-DD').optional(),
                    gender: Joi.string().required().valid(
                        [
                            'MALE',
                            'FEMALE'
                        ]
                    ),
                    lat: Joi.string().trim().optional(),
                    lon: Joi.string().trim().optional(),
                    deviceType: Joi.string().required().valid([UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.DEVICE_TYPES.ANDROID, UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.DEVICE_TYPES.WEB, UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.DEVICE_TYPES.IOS]),
                    deviceToken: Joi.string().required().min(1).trim(),
                    appVersion: Joi.string().required().trim(),
                    password: Joi.string().optional().min(6),
                    facebookId: Joi.string().optional().trim(),
                    googleId: Joi.string().optional().trim()

                },
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/editProfile',
        handler: function (request, reply) {
            var userData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.UpdateUser(request.payload, userData, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(UniversalFunctions.CONFIG.APP_CONSTANTS.STATUS_MSG.SUCCESS.UPDATED, data))
                }
            });
        },
        config: {
            description: 'Edit user profile',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                headers: UniversalFunctions.authorizationHeaderObj,
                payload: {
                    firstName: Joi.string().optional().trim(),
                    lastName: Joi.string().optional().trim(),
                    dob: Joi.date().format('YYYY-MM-DD').description('YYYY-MM-DD').optional(),
                    lat: Joi.string().optional().trim(),
                    lon: Joi.string().optional().trim(),
                },
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/login',
        handler: function (request, reply) {
            var payloadData = request.payload;
            Controller.FanspickController.loginUser(payloadData, function (err, data) {
                if (err) {
                    //console.log();
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Login Via Email & Password For Donor',
            tags: ['api', 'fanspick'],
            validate: {
                payload: {
                    email: Joi.string().email().required(),
                    fcmId: Joi.string().trim(),
                    password: Joi.string().trim(),
                    facebookId: Joi.string().trim(),
                    googleId: Joi.string().trim(),
                    loginType: Joi.string().required().valid([UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.LOGIN_TYPE.SIMPLE, UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.LOGIN_TYPE.GOOGLE, UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.LOGIN_TYPE.FACEBOOK]),
                    deviceType: Joi.string().required().valid([UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.DEVICE_TYPES.ANDROID, UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.DEVICE_TYPES.WEB, UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.DEVICE_TYPES.IOS]),
                    deviceToken: Joi.string().required().min(1).trim(),
                    appVersion: Joi.string().required().trim()
                },
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/loginViaAccessToken',
        handler: function (request, reply) {
            var userData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            //reply(request.payload.materialImages);
            if (userData && userData.id) {
                Controller.FanspickController.loginViaAccessToken(request.payload, userData, function (err, data) {
                    if (err) {
                        reply(UniversalFunctions.sendError(err));
                    } else {
                        reply(UniversalFunctions.sendSuccess(null, data))
                    }
                });
            }
        },
        config: {
            description: 'Login via access token',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    deviceType: Joi.string().required().valid([UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.DEVICE_TYPES.ANDROID, UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.DEVICE_TYPES.IOS]),
                    deviceToken: Joi.string().required().min(1).trim()

                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'GET',
        path: '/api/fanspick/viewProfile',
        handler: function (request, reply) {
            var userData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            //reply(request.payload.materialImages);
            if (userData && userData.id) {
                Controller.FanspickController.viewProfile(userData, function (err, data) {
                    if (err) {
                        reply(UniversalFunctions.sendError(err));
                    } else {
                        reply(UniversalFunctions.sendSuccess(null, data))
                    }
                });
            }
        },
        config: {
            description: 'Login via access token',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'PUT',
        path: '/api/fanspick/forgotPassword',
        handler: function (request, reply) {
            Controller.FanspickController.getResetPasswordToken(request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Sends Reset Password Token To FanspickUser',
            tags: ['api', 'fanspick'],
            validate: {
                payload: {
                    email: Joi.string().email().required()
                },
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'PUT',
        path: '/api/fanspick/resetPassword',
        handler: function (request, reply) {
            var queryData = request.payload;
            Controller.FanspickController.resetPassword(queryData, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Reset Password For User',
            tags: ['api', 'fanspick'],
            validate: {
                payload: {
                    email: Joi.string().email().required(),
                    passwordResetToken: Joi.string().required(),
                    newPassword: Joi.string().min(5).required()
                },
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'PUT',
        path: '/api/fanspick/changePassword',
        handler: function (request, reply) {
            var userData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.changePassword(request.payload, userData, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(UniversalFunctions.CONFIG.APP_CONSTANTS.STATUS_MSG.SUCCESS.UPDATED))
                }
            });
        },
        config: {
            description: 'Change Password of User',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                headers: UniversalFunctions.authorizationHeaderObj,
                payload: {
                    oldPassword: Joi.string().required().min(5).trim(),
                    newPassword: Joi.string().required().min(5).trim()
                },
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/checkUsername',
        handler: function (request, reply) {
            var payloadData = request.payload;
            Controller.FanspickController.checkUsername(payloadData, function (err, data) {
                if (err) {
                    //console.log();
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Check avalability of username',
            tags: ['api', 'fanspick'],
            validate: {
                payload: {
                    username: Joi.string().required().trim()
                },
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/eventLoging',
        handler: function (request, reply) {
            var payloadData = request.payload;
            Controller.FanspickController.eventLoging(payloadData, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Loging event of users',
            tags: ['api', 'fanspick'],
            validate: {
                payload: {
                    lat: Joi.string().required(),
                    lon: Joi.string().required(),
                    eventType: Joi.string().required().valid([
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.USER_SIGNIN,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.APP_START,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.ACC_CREATE,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.ACC_COMP,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.ACC_UPDATE,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.TEAM_SEL,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.FIX_SEL,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.COM_SEL,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.TOPIC_SEL,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.BILL_OPEN,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.BILL_SEL,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.ALERT_CLICKED,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.ALERT_BANNER_VIEW,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.ALERT_LINK_CLICKS,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.MANAGERS_PICK,
                        UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.EVENT_TYPES.FANS_PICK
                    ]),
                    eventDescription: Joi.string().required(),
                    eventAdditionalInfoID: Joi.string().trim(),
                    userId: Joi.string().trim(),
                    userAgent: Joi.string().required(),
                    deviceType: Joi.string().required().valid([UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.DEVICE_TYPES.ANDROID, UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.DEVICE_TYPES.WEB, UniversalFunctions.CONFIG.APP_CONSTANTS.DATABASE.DEVICE_TYPES.IOS]),
                    deviceToken: Joi.string().required().min(1).trim(),
                    appVersion: Joi.string().required().trim()
                },
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getAllFixtures',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getAllFixtures(function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Gets all fixtures',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getTopicsByCommunity',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getAllTopic(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'List all community',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    communityID: Joi.string().required().trim(),
                    type: Joi.string().required().valid(
                        [
                            'HOT',
                            'ALL'
                        ]
                    ),
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getAllTopics',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getAllTopicAsTopicdatas(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'List all topics',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getTopicsByFixture',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getTopicByFixture(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Get Topic for a particular team and fixture',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim(),
                    fixtureId: Joi.string().required().trim(),
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'GET',
        path: '/api/fanspick/getAllCommunity',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getAllCommunity(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'List all community',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getMyCommunity',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getMyCommunity(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Find community according to the team',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/addCommunity',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.addCommunity(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Find community according to the team',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    communityId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'GET',
        path: '/api/fanspick/getSports',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getSports(fanspickData, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Lists all sports',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getCountriesForSport',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getCountriesForSport(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Lists all countries for a particular sport',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    sportId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getLeaguesForCountry',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getLeaguesForCountry(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'List all domestic leagues of selected country',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    countryId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getTeamsForCountry',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getTeamsForCountry(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'List all teams of a Country',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    countryId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getTeamsForCompetition',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getTeamsForCompetition(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'List all teams of a Competition',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    competitionId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getUpcomingFixtures',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getUpcomingFixtures(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Gets the upcoming fixtures using teamId',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getTeamData',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getTeamData(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Get Data for a specific team',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },

    {
        method: 'POST',
        path: '/api/fanspick/setFavouriteTeam',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.setFavouriteTeam(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'List all teams of league',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getTeamSquad',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getTeamSquad(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'List all teams of league',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/getPlayerData',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getPlayerData(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'List player details',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    playerId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/unSetFavouriteTeam',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.unSetFavouriteTeam(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Unset favorite team',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/chatHistory',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getChatData(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'List all chat history',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    topicId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/setUserPick',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.setUserPick(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Set User Pick',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim(),
                    fixtureId: Joi.string().required().trim(),
                    playerId: Joi.string().required().trim(),
                    playerName: Joi.string().trim(),
                    playerPositionX: Joi.string().required().trim(),
                    playerPositionY: Joi.string().required().trim(),
                    playerRole: Joi.string().required().trim(),
                    formation: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/unsetUserPick',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.unsetUserPick(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Remove player from User Pick',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim(),
                    fixtureId: Joi.string().required().trim(),
                    playerId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },

    {
        method: 'POST',
        path: '/api/fanspick/getUserPick',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getUserPick(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Gets all players selected in User Pick',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim(),
                    fixtureId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },

    {
        method: 'POST',
        path: '/api/fanspick/clearUserPick',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.clearUserPick(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Clears all players in users pick',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim(),
                    fixtureId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },

    {
        method: 'POST',
        path: '/api/fanspick/getManagersPick',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getManagersPick(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Gets all players selected by manager',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    teamId: Joi.string().required().trim(),
                    fixtureId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },
    {
        method: 'POST',
        path: '/api/fanspick/createUserAction',
        handler: function (request, reply) {
            var userData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            if (userData && userData.id) {
                Controller.FanspickController.createUserAction(userData, request.payload, function (err, data) {
                    if (err) {
                        reply(UniversalFunctions.sendError(err));
                    } else {
                        reply(UniversalFunctions.sendSuccess(null, data))
                    }
                });
            }
        },
        config: {
            description: 'Create User Action',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    userId: Joi.string().required().trim(),
                    fixtureId: Joi.string().required().trim(),
                    teamId: Joi.string().required().trim(),
                    playerId: Joi.string().required().trim(),
                    action: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },

    {
        method: 'POST',
        path: '/api/fanspick/getNotification',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getNotification(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Get Notification',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    notificationID: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },


    {
        method: 'POST',
        path: '/api/fanspick/getFixtureData',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getFixtureData(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Gets Match Status, Goals and Commentary',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    fixtureId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },

    {
        method: 'POST',
        path: '/api/fanspick/getFixtureStatus',
        handler: function (request, reply) {
            var fanspickData = request.auth && request.auth.credentials && request.auth.credentials.userData || null;
            Controller.FanspickController.getFixtureStatus(fanspickData, request.payload, function (err, data) {
                if (err) {
                    reply(UniversalFunctions.sendError(err));
                } else {
                    reply(UniversalFunctions.sendSuccess(null, data))
                }
            });
        },
        config: {
            description: 'Gets Fixture Status and Goals',
            tags: ['api', 'fanspick'],
            auth: 'FanspickAuth',
            validate: {
                payload: {
                    fixtureId: Joi.string().required().trim()
                },
                headers: UniversalFunctions.authorizationHeaderObj,
                failAction: UniversalFunctions.failActionFunction
            },
            plugins: {
                'hapi-swagger': {
                    payloadType: 'form',
                    responseMessages: UniversalFunctions.CONFIG.APP_CONSTANTS.swaggerDefaultResponseMessages
                }
            }
        }
    },

];